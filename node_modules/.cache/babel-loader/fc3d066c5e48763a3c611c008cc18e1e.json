{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Notification = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactRedux = require('react-redux');\n\nvar _helpers = require('../helpers');\n\nvar _notifications = require('../store/notifications');\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\r\n * Create a timer\r\n * @param {Number} dismissAfter\r\n * @param {Function} callback\r\n * @returns {Function|null} a Timer\r\n */\n\n\nfunction createTimer(dismissAfter, callback) {\n  if (dismissAfter > 0) {\n    return new _helpers.Timer(dismissAfter, callback);\n  }\n\n  return null;\n}\n\nvar Notification = exports.Notification = function (_Component) {\n  _inherits(Notification, _Component);\n  /**\r\n   * Init timer\r\n   * @param {Object} props\r\n   * @returns {void}\r\n   */\n\n\n  function Notification(props) {\n    _classCallCheck(this, Notification);\n\n    var dismissAfter = props.notification.dismissAfter;\n\n    var _this = _possibleConstructorReturn(this, (Notification.__proto__ || Object.getPrototypeOf(Notification)).call(this, props));\n\n    _this._remove = function () {\n      var _this$props = _this.props,\n          removeNotification = _this$props.removeNotification,\n          id = _this$props.notification.id;\n      removeNotification(id);\n    };\n\n    _this._pauseTimer = function () {\n      var timer = _this.state.timer;\n      timer.pause();\n    };\n\n    _this._resumeTimer = function () {\n      var timer = _this.state.timer;\n      timer.resume();\n    };\n\n    _this._setHTML = function (content) {\n      return {\n        __html: content\n      };\n    };\n\n    _this._renderButtons = function () {\n      var _this$props2 = _this.props,\n          className = _this$props2.className,\n          buttons = _this$props2.notification.buttons;\n      return buttons.map(function (_ref) {\n        var name = _ref.name,\n            onClick = _ref.onClick,\n            primary = _ref.primary;\n        return _react2.default.createElement('button', {\n          key: name,\n          className: className.button,\n          onClick: onClick\n        }, _react2.default.createElement('span', {\n          className: className.buttonText\n        }, primary ? _react2.default.createElement('b', null, name) : name));\n      });\n    };\n\n    _this.state = {\n      timer: createTimer(dismissAfter, _this._remove)\n    };\n    return _this;\n  }\n  /**\r\n   * Run `onAdd` callback function when component is mounted\r\n   * @returns {void}\r\n   */\n\n\n  _createClass(Notification, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var onAdd = this.props.notification.onAdd;\n\n      if (typeof onAdd === 'function') {\n        onAdd();\n      }\n    }\n    /**\r\n     * Run `onRemove` callback function when component will unmount\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var onRemove = this.props.notification.onRemove;\n\n      if (typeof onRemove === 'function') {\n        onRemove();\n      }\n    }\n    /**\r\n     * Update timer\r\n     * @param {Object} nextProps\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var dismissAfter = nextProps.notification.dismissAfter;\n      this.setState({\n        timer: createTimer(dismissAfter, this._remove)\n      });\n    }\n    /**\r\n     * Remove the notification\r\n     * @private\r\n     * @returns {void}\r\n     */\n\n    /**\r\n     * Pauses the timer\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n    /**\r\n     * Resumes the timer\r\n     * @returns {void}\r\n     * @private\r\n     */\n\n    /**\r\n     * Wrap content in an object ready for HTML\r\n     * @param {String} content a text\r\n     * @returns {Object}\r\n     * @private\r\n     */\n\n    /**\r\n     * Render button(s)\r\n     * @returns {*}\r\n     */\n\n  }, {\n    key: 'render',\n\n    /**\r\n     * Render\r\n     * @returns {XML}\r\n     */\n    value: function render() {\n      var _props = this.props,\n          className = _props.className,\n          _props$notification = _props.notification,\n          title = _props$notification.title,\n          message = _props$notification.message,\n          status = _props$notification.status,\n          dismissible = _props$notification.dismissible,\n          closeButton = _props$notification.closeButton,\n          buttons = _props$notification.buttons,\n          image = _props$notification.image,\n          allowHTML = _props$notification.allowHTML;\n      var timer = this.state.timer;\n      var notificationClass = [className.main, className.status(status), className.buttons(buttons.length), dismissible && !closeButton ? className.dismissible : null].join(' ');\n\n      if (timer) {\n        this._resumeTimer();\n      }\n\n      return _react2.default.createElement('div', {\n        className: className.wrapper,\n        onClick: dismissible && !closeButton ? this._remove : null,\n        onMouseEnter: timer ? this._pauseTimer : null,\n        onMouseLeave: timer ? this._resumeTimer : null\n      }, _react2.default.createElement('div', {\n        className: notificationClass\n      }, image ? _react2.default.createElement('div', {\n        className: className.imageContainer\n      }, _react2.default.createElement('span', {\n        className: className.image,\n        style: {\n          backgroundImage: 'url(' + image + ')'\n        }\n      })) : _react2.default.createElement('span', {\n        className: className.icon\n      }), _react2.default.createElement('div', {\n        className: className.meta\n      }, title ? allowHTML ? _react2.default.createElement('h4', {\n        className: className.title,\n        dangerouslySetInnerHTML: this._setHTML(title)\n      }) : _react2.default.createElement('h4', {\n        className: className.title\n      }, title) : null, message ? allowHTML ? _react2.default.createElement('p', {\n        className: className.message,\n        dangerouslySetInnerHTML: this._setHTML(message)\n      }) : _react2.default.createElement('p', {\n        className: className.message\n      }, message) : null), dismissible && closeButton ? _react2.default.createElement('div', {\n        className: className.closeButtonContainer\n      }, _react2.default.createElement('span', {\n        className: className.closeButton,\n        onClick: this._remove\n      })) : null, buttons.length ? _react2.default.createElement('div', {\n        className: className.buttons(),\n        onClick: this._remove\n      }, this._renderButtons()) : null));\n    }\n  }]);\n\n  return Notification;\n}(_react.Component);\n\nNotification.propTypes = {\n  className: _propTypes2.default.shape({\n    main: _propTypes2.default.string.isRequired,\n    wrapper: _propTypes2.default.string.isRequired,\n    meta: _propTypes2.default.string.isRequired,\n    title: _propTypes2.default.string.isRequired,\n    message: _propTypes2.default.string.isRequired,\n    imageContainer: _propTypes2.default.string.isRequired,\n    image: _propTypes2.default.string.isRequired,\n    icon: _propTypes2.default.string.isRequired,\n    status: _propTypes2.default.func.isRequired,\n    dismissible: _propTypes2.default.string.isRequired,\n    closeButtonContainer: _propTypes2.default.string.isRequired,\n    closeButton: _propTypes2.default.string.isRequired,\n    buttons: _propTypes2.default.func.isRequired,\n    button: _propTypes2.default.string.isRequired,\n    buttonText: _propTypes2.default.string.isRequired\n  }).isRequired,\n  notification: _propTypes2.default.shape({\n    id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,\n    title: _propTypes2.default.string,\n    message: _propTypes2.default.string,\n    image: _propTypes2.default.string,\n    status: _propTypes2.default.string.isRequired,\n    position: _propTypes2.default.oneOf((0, _helpers.mapObjectValues)(_constants.POSITIONS)),\n    dismissAfter: _propTypes2.default.number.isRequired,\n    dismissible: _propTypes2.default.bool.isRequired,\n    onAdd: _propTypes2.default.func,\n    onRemove: _propTypes2.default.func,\n    closeButton: _propTypes2.default.bool.isRequired,\n    buttons: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n      name: _propTypes2.default.string.isRequired,\n      onClick: _propTypes2.default.func\n    })).isRequired,\n    allowHTML: _propTypes2.default.bool.isRequired\n  }).isRequired,\n  removeNotification: _propTypes2.default.func.isRequired\n};\nexports.default = (0, _reactRedux.connect)(null, {\n  removeNotification: _notifications.removeNotification\n})(Notification);","map":null,"metadata":{},"sourceType":"script"}