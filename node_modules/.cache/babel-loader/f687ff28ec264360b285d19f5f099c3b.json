{"ast":null,"code":"function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nimport React from 'react';\nimport { defaultTranslateOptions } from './localize';\nexport var getLocalizedElement = function getLocalizedElement(options) {\n  var translation = options.translation,\n      data = options.data,\n      renderInnerHtml = options.renderInnerHtml;\n  var translatedValueOrArray = templater(translation, data); // if result of templater is string, do the usual stuff\n\n  if (typeof translatedValueOrArray === 'string') {\n    return renderInnerHtml === true && hasHtmlTags(translatedValueOrArray) ? React.createElement('span', {\n      dangerouslySetInnerHTML: {\n        __html: translatedValueOrArray\n      }\n    }) : translatedValueOrArray;\n  } // at this point we know we have react components;\n  // check if there are HTMLTags in the translation (not allowed)\n\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = translatedValueOrArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var portion = _step.value;\n\n      if (typeof portion === 'string' && hasHtmlTags(portion)) {\n        warning('HTML tags in the translation string are not supported when passing React components as arguments to the translation.');\n        return '';\n      }\n    } // return as Element\n\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return React.createElement.apply(React, ['span', null].concat(_toConsumableArray(translatedValueOrArray)));\n};\nexport var hasHtmlTags = function hasHtmlTags(value) {\n  var pattern = /(&[^\\s]*;|<\\/?\\w+((\\s+\\w+(\\s*=\\s*(?:\".*?\"|'.*?'|[\\^'\">\\s]+))?)+\\s*|\\s*)\\/?>)/;\n  return value.search(pattern) >= 0;\n};\n/**\n * @func templater\n * @desc A poor mans template parser\n * @param {string} strings The template string\n * @param {object} data The data that should be inserted in template\n * @return {string} The template string with the data merged in\n */\n\nexport var templater = function templater(strings) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!strings) return ''; // ${**}\n  // brackets to include it in the result of .split()\n\n  var genericPlaceholderPattern = '(\\\\${\\\\s*[^\\\\s}]+\\\\s*})'; // split: from 'Hey ${name}' -> ['Hey', '${name}']\n  // filter: clean empty strings\n  // map: replace ${prop} with data[prop]\n\n  var splitStrings = strings.split(new RegExp(genericPlaceholderPattern, 'gmi')).filter(function (str) {\n    return !!str;\n  }).map(function (templatePortion) {\n    var matched = void 0;\n\n    for (var prop in data) {\n      if (matched) break;\n      var pattern = '\\\\${\\\\s*' + prop + '\\\\s*}';\n      var regex = new RegExp(pattern, 'gmi');\n      if (regex.test(templatePortion)) matched = data[prop];\n    }\n\n    if (typeof matched === 'undefined') return templatePortion;\n    return matched;\n  }); // if there is a React element, return as array\n\n  if (splitStrings.some(function (portion) {\n    return React.isValidElement(portion);\n  })) {\n    return splitStrings;\n  } // otherwise concatenate all portions into the translated value\n\n\n  return splitStrings.reduce(function (translated, portion) {\n    return translated + ('' + portion);\n  }, '');\n};\nexport var getIndexForLanguageCode = function getIndexForLanguageCode(code, languages) {\n  return languages.map(function (language) {\n    return language.code;\n  }).indexOf(code);\n};\nexport var objectValuesToString = function objectValuesToString(data) {\n  return !Object.values ? Object.keys(data).map(function (key) {\n    return data[key].toString();\n  }).toString() : Object.values(data).toString();\n};\nexport var validateOptions = function validateOptions(options) {\n  if (options.onMissingTranslation !== undefined && typeof options.onMissingTranslation !== 'function') {\n    throw new Error('react-localize-redux: an invalid onMissingTranslation function was provided.');\n  }\n\n  if (options.renderToStaticMarkup !== false && typeof options.renderToStaticMarkup !== 'function') {\n    throw new Error('\\n      react-localize-redux: initialize option renderToStaticMarkup is invalid.\\n      Please see https://ryandrewjohnson.github.io/react-localize-redux-docs/#initialize.\\n    ');\n  }\n\n  return options;\n};\nexport var getTranslationsForLanguage = function getTranslationsForLanguage(language, languages, translations) {\n  // no language! return no translations\n  if (!language) {\n    return {};\n  }\n\n  var languageCode = language.code;\n  var languageIndex = getIndexForLanguageCode(languageCode, languages);\n  var keys = Object.keys(translations);\n  var totalKeys = keys.length;\n  var translationsForLanguage = {};\n\n  for (var i = 0; i < totalKeys; i++) {\n    var key = keys[i];\n    translationsForLanguage[key] = translations[key][languageIndex];\n  }\n\n  return translationsForLanguage;\n};\nexport var storeDidChange = function storeDidChange(store, onChange) {\n  var currentState = void 0;\n\n  function handleChange() {\n    var nextState = store.getState();\n\n    if (nextState !== currentState) {\n      onChange(currentState);\n      currentState = nextState;\n    }\n  }\n\n  var unsubscribe = store.subscribe(handleChange);\n  handleChange();\n  return unsubscribe;\n};\nexport var getSingleToMultilanguageTranslation = function getSingleToMultilanguageTranslation(language, languageCodes, flattenedTranslations, existingTranslations) {\n  var languageIndex = languageCodes.indexOf(language);\n  var translations = languageIndex >= 0 ? flattenedTranslations : {};\n  var keys = Object.keys(translations);\n  var totalKeys = keys.length;\n  var singleLanguageTranslations = {};\n\n  var _loop = function _loop(i) {\n    var key = keys[i]; // loop through each language, and for languages that don't match languageIndex\n    // keep existing translation data, and for languageIndex store new translation data\n\n    var translationValues = languageCodes.map(function (code, index) {\n      var existingValues = existingTranslations[key] || [];\n      return index === languageIndex ? flattenedTranslations[key] : existingValues[index];\n    });\n    singleLanguageTranslations[key] = translationValues;\n  };\n\n  for (var i = 0; i < totalKeys; i++) {\n    _loop(i);\n  }\n\n  return singleLanguageTranslations;\n};\nexport var get = function get(obj, path) {\n  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  var pathArr = path.split('.').filter(Boolean);\n  return pathArr.reduce(function (ret, key) {\n    return ret && ret[key] ? ret[key] : defaultValue;\n  }, obj);\n}; // Thanks react-redux for utility function\n// https://github.com/reactjs/react-redux/blob/master/src/utils/warning.js\n\nexport var warning = function warning(message) {\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {}\n};","map":null,"metadata":{},"sourceType":"module"}