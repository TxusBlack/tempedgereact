{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TO_STRING = exports.HAS_PROP = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.regFormat = regFormat;\nexports.prepare = prepare;\nexports.trunc = trunc;\nexports.selectNum = selectNum;\nexports.isNumber = isNumber;\nexports.prepareMsg = prepareMsg;\nexports.toObjectMsg = toObjectMsg;\nexports.memoize = memoize;\n\nvar _validators = require('./validators');\n\nvar _validators2 = _interopRequireDefault(_validators);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar HAS_PROP = exports.HAS_PROP = {}.hasOwnProperty;\nvar TO_STRING = exports.TO_STRING = {}.toString;\n\nfunction regFormat(func, messageType) {\n  return memoize(function (options) {\n    options = options || {};\n    var msg = options.msg || options.message;\n    return prepare(options['if'], options.unless, options.allowBlank, function (value) {\n      if (!value.match(func(options))) {\n        return _validators2.default.formatMessage(prepareMsg(msg, messageType));\n      }\n    });\n  });\n}\n\nfunction prepare(ifCond, unlessCond, allowBlank, func) {\n  return function (value) {\n    var allValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!value || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {\n      value = value == null ? '' : '' + value;\n\n      if ((allowBlank != null ? allowBlank : _validators2.default.defaultOptions.allowBlank) && !value.trim()) {\n        return;\n      }\n    }\n\n    if ((typeof ifCond !== 'function' || ifCond(allValues, value)) && (typeof unlessCond !== 'function' || !unlessCond(allValues, value))) {\n      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n\n      return func.apply(undefined, [value, allValues].concat(args));\n    }\n  };\n}\n\nfunction trunc(num) {\n  /* istanbul ignore next */\n  return Math.trunc ? Math.trunc(num) : num < 0 ? Math.ceil(num) : Math.floor(num);\n}\n\nfunction selectNum(var1, var2) {\n  return isNumber(var1) ? +var1 : arguments.length > 1 && isNumber(var2) ? +var2 : null;\n}\n\nfunction isNumber(num) {\n  // eslint-disable-next-line\n  return !isNaN(num) && (0 != num || '' !== ('' + num).trim());\n}\n\nfunction prepareMsg(msg, type, values) {\n  if (msg == null) {\n    return defaultMessage(type, values);\n  }\n\n  if (HAS_PROP.call(msg, 'props') && isReactElement(msg)) {\n    msg = msg.props;\n  }\n\n  if (msg[type] != null) {\n    msg = msg[type];\n  }\n\n  if (isObject(msg)) {\n    if (HAS_PROP.call(msg, 'id') || HAS_PROP.call(msg, 'defaultMessage')) {\n      return Object.assign({}, msg, {\n        values: values\n      });\n    }\n\n    return defaultMessage(type, values);\n  }\n\n  return {\n    id: msg,\n    defaultMessage: msg,\n    values: values\n  };\n}\n\nfunction toObjectMsg(msg) {\n  if (msg == null) return null;\n  return isObject(msg) ? msg : {\n    id: msg,\n    defaultMessage: msg\n  };\n}\n\nfunction memoize(func) {\n  if (!func.cache) {\n    func.cache = {};\n  }\n\n  return function (options) {\n    var key = stringify(options);\n    return HAS_PROP.call(func.cache, key) ? func.cache[key] : func.cache[key] = func(options);\n  };\n} // private\n\n\nfunction defaultMessage(type, values) {\n  var msg = _validators2.default.messages[type];\n  return typeof msg === 'string' ? {\n    defaultMessage: msg,\n    values: values\n  } : Object.assign({}, msg, {\n    values: values\n  });\n}\n\nfunction stringify(options) {\n  var arr = [];\n  var value = void 0;\n\n  for (var k in options) {\n    if (HAS_PROP.call(options, k)) {\n      value = options[k];\n      arr.push(k, isReactElement(value) ? stringify(value.props) : isObject(value) ? stringify(value) : value.toString());\n    }\n  }\n\n  return JSON.stringify(arr);\n}\n\nfunction isReactElement(object) {\n  return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && '$$typeof' in object;\n}\n\nfunction isObject(obj) {\n  return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && TO_STRING.call(obj) === '[object Object]' && obj !== null;\n}","map":null,"metadata":{},"sourceType":"script"}