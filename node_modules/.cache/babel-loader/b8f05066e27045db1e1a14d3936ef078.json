{"ast":null,"code":"// Generated by CoffeeScript 1.9.1\n(function () {\n  var JSOG, JSOG_OBJECT_ID, hasCustomJsonificaiton, isArray, nextId;\n  JSOG = {};\n  nextId = 0;\n\n  isArray = Array.isArray || function (obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n\n  hasCustomJsonificaiton = function hasCustomJsonificaiton(obj) {\n    return obj.toJSON != null;\n  };\n\n  JSOG_OBJECT_ID = '__jsogObjectId';\n\n  JSOG.encode = function (original) {\n    var _doEncode, idOf, sofar;\n\n    sofar = {};\n\n    idOf = function idOf(obj) {\n      if (!obj[JSOG_OBJECT_ID]) {\n        obj[JSOG_OBJECT_ID] = \"\" + nextId++;\n      }\n\n      return obj[JSOG_OBJECT_ID];\n    };\n\n    _doEncode = function doEncode(original) {\n      var encodeArray, encodeObject;\n\n      encodeObject = function encodeObject(original) {\n        var id, key, result, value;\n        id = idOf(original);\n\n        if (sofar[id]) {\n          return {\n            '@ref': id\n          };\n        }\n\n        result = sofar[id] = {\n          '@id': id\n        };\n\n        for (key in original) {\n          value = original[key];\n\n          if (key !== JSOG_OBJECT_ID) {\n            result[key] = _doEncode(value);\n          }\n        }\n\n        return result;\n      };\n\n      encodeArray = function encodeArray(original) {\n        var val;\n        return function () {\n          var i, len, results;\n          results = [];\n\n          for (i = 0, len = original.length; i < len; i++) {\n            val = original[i];\n            results.push(_doEncode(val));\n          }\n\n          return results;\n        }();\n      };\n\n      if (original == null) {\n        return original;\n      } else if (hasCustomJsonificaiton(original)) {\n        return original;\n      } else if (isArray(original)) {\n        return encodeArray(original);\n      } else if (typeof original === 'object') {\n        return encodeObject(original);\n      } else {\n        return original;\n      }\n    };\n\n    return _doEncode(original);\n  };\n\n  JSOG.decode = function (encoded) {\n    var _doDecode, found;\n\n    found = {};\n\n    _doDecode = function doDecode(encoded) {\n      var decodeArray, decodeObject;\n\n      decodeObject = function decodeObject(encoded) {\n        var id, key, ref, result, value;\n        ref = encoded['@ref'];\n\n        if (ref != null) {\n          ref = ref.toString();\n        }\n\n        if (ref != null) {\n          return found[ref];\n        }\n\n        result = {};\n        id = encoded['@id'];\n\n        if (id != null) {\n          id = id.toString();\n        }\n\n        if (id) {\n          found[id] = result;\n        }\n\n        for (key in encoded) {\n          value = encoded[key];\n\n          if (key !== '@id') {\n            result[key] = _doDecode(value);\n          }\n        }\n\n        return result;\n      };\n\n      decodeArray = function decodeArray(encoded) {\n        var value;\n        return function () {\n          var i, len, results;\n          results = [];\n\n          for (i = 0, len = encoded.length; i < len; i++) {\n            value = encoded[i];\n            results.push(_doDecode(value));\n          }\n\n          return results;\n        }();\n      };\n\n      if (encoded == null) {\n        return encoded;\n      } else if (isArray(encoded)) {\n        return decodeArray(encoded);\n      } else if (typeof encoded === 'object') {\n        return decodeObject(encoded);\n      } else {\n        return encoded;\n      }\n    };\n\n    return _doDecode(encoded);\n  };\n\n  JSOG.stringify = function (obj) {\n    return JSON.stringify(JSOG.encode(obj));\n  };\n\n  JSOG.parse = function (str) {\n    return JSOG.decode(JSON.parse(str));\n  };\n\n  if (typeof module !== \"undefined\" && module !== null && module.exports) {\n    module.exports = JSOG;\n  }\n\n  if (typeof window !== \"undefined\" && window !== null) {\n    window.JSOG = JSOG;\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define('JSOG', [], function () {\n      return JSOG;\n    });\n  }\n\n  return JSOG;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}