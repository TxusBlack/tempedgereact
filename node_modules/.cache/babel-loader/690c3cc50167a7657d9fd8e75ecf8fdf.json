{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\migue\\\\Documents\\\\Jose\\\\TempEdge\\\\tempedgereact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\migue\\\\Documents\\\\Jose\\\\TempEdge\\\\tempedgereact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { LOGIN } from './types';\nimport history from '../../history.js';\nimport Axios from 'axios';\nimport ls from 'local-storage';\nimport httpService from '../../utils/services/httpService/httpService';\nvar baseUrlTempEdge = \"http://96.56.31.162:9191\";\nexport var doLogin = function doLogin(url, data) {\n  return function (dispatch) {\n    //'dispatch', courtesy of the Thunk middleware so we can call it directly\n    httpService.getAuthToken('/oauth/token', data).then(\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(res) {\n        var token, ipAddress;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                token = res.data.access_token;\n                ipAddress = window.location.hostname;\n                data.IPAddress = window.location.hostname;\n                sessionStorage.setItem('access_token', token);\n                Axios({\n                  url: baseUrlTempEdge + url,\n                  method: 'post',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  data: data,\n                  params: {\n                    access_token: token\n                  }\n                }).then(function (response) {\n                  dispatch({\n                    type: LOGIN,\n                    payload: response.data.result\n                  });\n                  var lang = window.location.pathname;\n                  lang = lang.split(\"/\");\n                  history.push(\"/protected/\".concat(lang));\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  };\n};\nexport var tempedgeAPI = function tempedgeAPI(url, data, actionName) {\n  return function (dispatch) {\n    var token = ls.get('access_token');\n    data.IPAddress = window.location.hostname;\n    Axios({\n      url: baseUrlTempEdge + url,\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data,\n      params: {\n        access_token: token\n      }\n    }).then(function (response) {\n      console.log(\"response: \", response);\n      dispatch({\n        type: actionName,\n        payload: response.data.result\n      });\n    });\n  };\n};\nexport var getList = function getList(url, actionName) {\n  return function (dispatch) {\n    httpService.getList(url).then(function (response) {\n      dispatch({\n        type: actionName,\n        payload: response.data.result\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\migue\\Documents\\Jose\\TempEdge\\tempedgereact\\src\\Redux\\actions\\tempEdgeActions.js"],"names":["LOGIN","history","Axios","ls","httpService","baseUrlTempEdge","doLogin","url","data","dispatch","getAuthToken","then","res","token","access_token","ipAddress","window","location","hostname","IPAddress","sessionStorage","setItem","method","headers","params","response","type","payload","result","lang","pathname","split","push","tempedgeAPI","actionName","get","console","log","getList"],"mappings":"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","sourcesContent":["import { LOGIN } from './types';\r\nimport history from '../../history.js';\r\nimport Axios from 'axios';\r\nimport ls from 'local-storage'\r\nimport httpService from '../../utils/services/httpService/httpService';\r\n\r\nlet baseUrlTempEdge = `http://96.56.31.162:9191`;\r\n\r\nexport let doLogin = (url, data) => {\r\n  return (dispatch) => {   //'dispatch', courtesy of the Thunk middleware so we can call it directly\r\n    httpService.getAuthToken('/oauth/token', data)\r\n      .then(async(res) => {\r\n        let token = res.data.access_token;\r\n        let ipAddress = window.location.hostname;\r\n        data.IPAddress = window.location.hostname;\r\n\r\n        sessionStorage.setItem('access_token', token);\r\n        Axios({\r\n          url: baseUrlTempEdge + url,\r\n          method: 'post',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          data: data,\r\n          params: {\r\n            access_token: token\r\n          }\r\n        }).then((response) => {\r\n          dispatch({\r\n            type: LOGIN,\r\n            payload: response.data.result\r\n          });\r\n\r\n          let lang = window.location.pathname;\r\n          lang = lang.split(\"/\");\r\n          history.push(`/protected/${lang}`);\r\n        });\r\n      });\r\n  }\r\n}\r\n\r\nexport let tempedgeAPI = (url, data, actionName) => {\r\n  return (dispatch) => {\r\n    let token = ls.get('access_token');\r\n    data.IPAddress = window.location.hostname;\r\n    Axios({\r\n      url: baseUrlTempEdge + url,\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      data: data,\r\n      params: {\r\n        access_token: token\r\n      }\r\n    }).then((response) => {\r\n      console.log(\"response: \", response);\r\n      dispatch({\r\n        type: actionName,\r\n        payload: response.data.result\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport let getList = (url, actionName) => {\r\n  return (dispatch) => {\r\n    httpService.getList(url)\r\n      .then((response) => {\r\n        dispatch({\r\n          type: actionName,\r\n          payload: response.data.result\r\n        });\r\n      });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}