{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport { localizeReducer, getActiveLanguage, getOptions, getTranslationsForActiveLanguage, initialize as initializeAC, INITIALIZE, InitializePayload } from './localize';\nimport { LocalizeContext, getContextPropsFromState } from './LocalizeContext';\nimport { storeDidChange } from './utils';\nexport var LocalizeProvider = function (_Component) {\n  _inherits(LocalizeProvider, _Component);\n\n  function LocalizeProvider(props) {\n    _classCallCheck(this, LocalizeProvider);\n\n    var _this = _possibleConstructorReturn(this, (LocalizeProvider.__proto__ || Object.getPrototypeOf(LocalizeProvider)).call(this, props));\n\n    var dispatch = _this.props.store ? _this.props.store.dispatch : _this.dispatch.bind(_this);\n    _this.getContextPropsSelector = getContextPropsFromState(dispatch);\n    var initialState = _this.props.initialize !== undefined ? localizeReducer(undefined, {\n      type: INITIALIZE,\n      payload: _this.props.initialize\n    }) : localizeReducer(undefined, {});\n    _this.state = {\n      localize: initialState\n    };\n    return _this;\n  }\n\n  _createClass(LocalizeProvider, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.initExternalStore();\n      this.subscribeToExternalStore();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.unsubscribeFromStore && this.unsubscribeFromStore();\n    }\n  }, {\n    key: 'initExternalStore',\n    value: function initExternalStore() {\n      var _props = this.props,\n          store = _props.store,\n          initialize = _props.initialize;\n\n      if (store && initialize) {\n        store.dispatch(initializeAC(initialize));\n      }\n    }\n  }, {\n    key: 'subscribeToExternalStore',\n    value: function subscribeToExternalStore() {\n      var store = this.props.store;\n\n      if (store) {\n        this.unsubscribeFromStore = storeDidChange(store, this.onStateDidChange.bind(this));\n      }\n    }\n  }, {\n    key: 'onStateDidChange',\n    value: function onStateDidChange(prevState) {\n      if (!this.props.store) {\n        return;\n      }\n\n      var getState = this.props.getState || function (state) {\n        return state.localize;\n      };\n\n      var prevLocalizeState = prevState && getState(prevState);\n      var curLocalizeState = getState(this.props.store.getState());\n      var prevActiveLanguage = prevState && getActiveLanguage(prevLocalizeState);\n      var curActiveLanguage = getActiveLanguage(curLocalizeState);\n      var prevOptions = prevState && getOptions(prevLocalizeState);\n      var curOptions = getOptions(curLocalizeState);\n      var prevTranslations = prevState && getTranslationsForActiveLanguage(prevLocalizeState);\n      var curTranslations = getTranslationsForActiveLanguage(curLocalizeState);\n      var hasActiveLangaugeChanged = (prevActiveLanguage && prevActiveLanguage.code) !== (curActiveLanguage && curActiveLanguage.code);\n      var hasOptionsChanged = prevOptions !== curOptions;\n      var hasTranslationsChanged = prevTranslations !== curTranslations;\n\n      if (hasActiveLangaugeChanged || hasOptionsChanged || hasTranslationsChanged) {\n        this.setState({\n          localize: curLocalizeState\n        });\n      }\n    }\n  }, {\n    key: 'dispatch',\n    value: function dispatch(action) {\n      this.setState(function (prevState) {\n        return {\n          localize: localizeReducer(prevState.localize, action)\n        };\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      this.contextProps = this.getContextPropsSelector(this.state.localize);\n      return React.createElement(LocalizeContext.Provider, {\n        value: this.contextProps\n      }, this.props.children);\n    }\n  }]);\n\n  return LocalizeProvider;\n}(Component);","map":null,"metadata":{},"sourceType":"module"}