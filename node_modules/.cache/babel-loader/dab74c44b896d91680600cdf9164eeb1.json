{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getTranslate, addTranslationForLanguage, getLanguages, getOptions, getActiveLanguage, getTranslationsForActiveLanguage } from './localize';\nimport { get, storeDidChange } from './utils';\nimport { LocalizeContext } from './LocalizeContext';\nimport { withLocalize } from './withLocalize';\n\nvar WrappedTranslate = function (_React$Component) {\n  _inherits(WrappedTranslate, _React$Component);\n\n  function WrappedTranslate() {\n    _classCallCheck(this, WrappedTranslate);\n\n    return _possibleConstructorReturn(this, (WrappedTranslate.__proto__ || Object.getPrototypeOf(WrappedTranslate)).apply(this, arguments));\n  }\n\n  _createClass(WrappedTranslate, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.addDefaultTranslation();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var idChanged = this.props.id && prevProps.id !== this.props.id;\n      var noDefaultLanguage = !get(prevProps, 'context.defaultLanguage') && !get(prevProps, 'options.language');\n      var incomingLanguage = get(this.props, 'context.defaultLanguage') || get(this.props, 'options.language');\n      var defaultLanguageSet = noDefaultLanguage && incomingLanguage;\n\n      if (idChanged || defaultLanguageSet) {\n        this.addDefaultTranslation();\n      }\n    }\n  }, {\n    key: 'addDefaultTranslation',\n    value: function addDefaultTranslation() {\n      var _props = this.props,\n          context = _props.context,\n          id = _props.id,\n          children = _props.children,\n          _props$options = _props.options,\n          options = _props$options === undefined ? {} : _props$options;\n      var defaultLanguage = options.language || context.defaultLanguage;\n\n      var fallbackRenderToStaticMarkup = function fallbackRenderToStaticMarkup(value) {\n        return value;\n      };\n\n      var renderToStaticMarkup = context.renderToStaticMarkup || fallbackRenderToStaticMarkup;\n      var hasId = id !== undefined;\n      var hasDefaultLanguage = defaultLanguage !== undefined;\n      var hasChildren = children !== undefined;\n      var hasFunctionAsChild = typeof children === 'function';\n      var ignoreTranslateChildren = options.ignoreTranslateChildren !== undefined ? options.ignoreTranslateChildren : context.ignoreTranslateChildren;\n      var isValidDefaultTranslation = hasChildren && hasId && hasDefaultLanguage;\n      var shouldAddDefaultTranslation = isValidDefaultTranslation && !hasFunctionAsChild && !ignoreTranslateChildren;\n\n      if (shouldAddDefaultTranslation) {\n        var translation = renderToStaticMarkup(children);\n        context.addTranslationForLanguage && context.addTranslationForLanguage(_defineProperty({}, id, translation), defaultLanguage);\n      }\n    }\n  }, {\n    key: 'renderChildren',\n    value: function renderChildren() {\n      var _props2 = this.props,\n          context = _props2.context,\n          _props2$id = _props2.id,\n          id = _props2$id === undefined ? '' : _props2$id,\n          options = _props2.options,\n          data = _props2.data;\n      return typeof this.props.children === 'function' ? this.props.children(context) : context.translate && context.translate(id, data, options);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return this.renderChildren();\n    }\n  }]);\n\n  return WrappedTranslate;\n}(React.Component);\n\nexport var Translate = function Translate(props) {\n  return React.createElement(LocalizeContext.Consumer, null, function (context) {\n    return React.createElement(WrappedTranslate, _extends({}, props, {\n      context: context\n    }));\n  });\n};","map":null,"metadata":{},"sourceType":"module"}