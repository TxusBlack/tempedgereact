{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { flatten } from 'flat';\nimport { createSelector, createSelectorCreator, defaultMemoize } from 'reselect';\nimport { getLocalizedElement, getIndexForLanguageCode, objectValuesToString, validateOptions, getTranslationsForLanguage, warning, getSingleToMultilanguageTranslation } from './utils';\n/**\n * TYPES\n */\n// This is to get around the whole default options issue with Flow\n// I tried using the $Diff approach, but with no luck so for now stuck with this terd.\n// Because sometimes you just want flow to shut up!\n\n/**\n * ACTIONS\n */\n\nexport var INITIALIZE = '@@localize/INITIALIZE';\nexport var ADD_TRANSLATION = '@@localize/ADD_TRANSLATION';\nexport var ADD_TRANSLATION_FOR_LANGUAGE = '@@localize/ADD_TRANSLATION_FOR_LANGUAGE';\nexport var SET_ACTIVE_LANGUAGE = '@@localize/SET_ACTIVE_LANGUAGE';\nexport var TRANSLATE = '@@localize/TRANSLATE';\n/**\n * REDUCERS\n */\n\nexport function languages() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments[1];\n\n  switch (action.type) {\n    case INITIALIZE:\n      var _options = action.payload.options || {};\n\n      return action.payload.languages.map(function (language, index) {\n        var isActive = function isActive(code) {\n          return _options.defaultLanguage !== undefined ? code === _options.defaultLanguage : index === 0;\n        }; // check if it's using array of Language objects, or array of language codes\n\n\n        return typeof language === 'string' ? {\n          code: language,\n          active: isActive(language) // language codes\n\n        } : _extends({}, language, {\n          active: isActive(language.code)\n        }); // language objects\n      });\n\n    case SET_ACTIVE_LANGUAGE:\n      return state.map(function (language) {\n        return language.code === action.payload.languageCode ? _extends({}, language, {\n          active: true\n        }) : _extends({}, language, {\n          active: false\n        });\n      });\n\n    default:\n      return state;\n  }\n}\nexport function translations() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments[1];\n  var flattenedTranslations = void 0;\n  var translationWithTransform = void 0;\n\n  switch (action.type) {\n    case INITIALIZE:\n      if (!action.payload.translation) {\n        return state;\n      }\n\n      flattenedTranslations = flatten(action.payload.translation, {\n        safe: true\n      });\n\n      var _options2 = action.payload.options || {};\n\n      var firstLanguage = typeof action.payload.languages[0] === 'string' ? action.payload.languages[0] : action.payload.languages[0].code;\n\n      var _defaultLanguage = _options2.defaultLanguage || firstLanguage;\n\n      var isMultiLanguageTranslation = Object.keys(flattenedTranslations).some(function (item) {\n        return Array.isArray(flattenedTranslations[item]);\n      }); // add translation based on whether it is single vs multi language translation data\n\n      var newTranslation = isMultiLanguageTranslation ? flattenedTranslations : getSingleToMultilanguageTranslation(_defaultLanguage, action.languageCodes, flattenedTranslations, state);\n      return _extends({}, state, newTranslation);\n\n    case ADD_TRANSLATION:\n      translationWithTransform = action.payload.translationOptions && action.payload.translationOptions.translationTransform !== undefined ? action.payload.translationOptions.translationTransform(action.payload.translation || {}, action.languageCodes) : action.payload.translation;\n      return _extends({}, state, flatten(translationWithTransform, {\n        safe: true\n      }));\n\n    case ADD_TRANSLATION_FOR_LANGUAGE:\n      flattenedTranslations = flatten(action.payload.translation, {\n        safe: true\n      });\n      return _extends({}, state, getSingleToMultilanguageTranslation(action.payload.language, action.languageCodes, flattenedTranslations, state));\n\n    default:\n      return state;\n  }\n}\nexport function options() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultTranslateOptions;\n  var action = arguments[1];\n\n  switch (action.type) {\n    case INITIALIZE:\n      var _options3 = action.payload.options || {};\n\n      var _defaultLanguage2 = _options3.defaultLanguage || action.languageCodes[0];\n\n      return _extends({}, state, validateOptions(_options3), {\n        defaultLanguage: _defaultLanguage2\n      });\n\n    default:\n      return state;\n  }\n}\nexport var defaultTranslateOptions = {\n  renderToStaticMarkup: false,\n  renderInnerHtml: false,\n  ignoreTranslateChildren: false,\n  defaultLanguage: '',\n  onMissingTranslation: function onMissingTranslation(_ref) {\n    var translationId = _ref.translationId,\n        languageCode = _ref.languageCode;\n    return 'Missing translationId: ${ translationId } for language: ${ languageCode }';\n  }\n};\nvar initialState = {\n  languages: [],\n  translations: {},\n  options: defaultTranslateOptions\n};\nexport var localizeReducer = function localizeReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments[1]; // execute the languages reducer first as we need access to those values for other reducers\n\n  var languagesState = languages(state.languages, action);\n  var languageCodes = languagesState.map(function (language) {\n    return language.code;\n  });\n  return {\n    languages: languagesState,\n    translations: translations(state.translations, _extends({}, action, {\n      languageCodes: languageCodes\n    })),\n    options: options(state.options, _extends({}, action, {\n      languageCodes: languageCodes\n    }))\n  };\n};\n/**\n * ACTION CREATORS\n */\n\nexport var initialize = function initialize(payload) {\n  return {\n    type: INITIALIZE,\n    payload: payload\n  };\n};\nexport var addTranslation = function addTranslation(translation, options) {\n  return {\n    type: ADD_TRANSLATION,\n    payload: {\n      translation: translation,\n      translationOptions: options\n    }\n  };\n};\nexport var addTranslationForLanguage = function addTranslationForLanguage(translation, language) {\n  return {\n    type: ADD_TRANSLATION_FOR_LANGUAGE,\n    payload: {\n      translation: translation,\n      language: language\n    }\n  };\n};\nexport var setActiveLanguage = function setActiveLanguage(languageCode) {\n  return {\n    type: SET_ACTIVE_LANGUAGE,\n    payload: {\n      languageCode: languageCode\n    }\n  };\n};\n/**\n * SELECTORS\n */\n\nexport var getTranslations = function getTranslations(state) {\n  return state.translations;\n};\nexport var getLanguages = function getLanguages(state) {\n  return state.languages;\n};\nexport var getOptions = function getOptions(state) {\n  return state.options;\n};\nexport var getActiveLanguage = function getActiveLanguage(state) {\n  var languages = getLanguages(state);\n  return languages.filter(function (language) {\n    return language.active === true;\n  })[0];\n};\n/**\n * A custom equality checker that checker that compares an objects keys and values instead of === comparison\n * e.g. {name: 'Ted', sport: 'hockey'} would result in 'name,sport - Ted,hocker' which would be used for comparison\n *\n * NOTE: This works with activeLanguage, languages, and translations data types.\n * If a new data type is added to selector this would need to be updated to accomodate\n */\n\nexport var translationsEqualSelector = createSelectorCreator(defaultMemoize, function (prev, cur) {\n  var prevKeys = (typeof prev === 'undefined' ? 'undefined' : _typeof(prev)) === 'object' ? Object.keys(prev).toString() : undefined;\n  var curKeys = (typeof cur === 'undefined' ? 'undefined' : _typeof(cur)) === 'object' ? Object.keys(cur).toString() : undefined;\n  var prevValues = (typeof prev === 'undefined' ? 'undefined' : _typeof(prev)) === 'object' ? objectValuesToString(prev) : undefined;\n  var curValues = (typeof cur === 'undefined' ? 'undefined' : _typeof(cur)) === 'object' ? objectValuesToString(cur) : undefined;\n  var prevCacheValue = prevKeys !== undefined && prevValues !== undefined ? prevKeys + ' - ' + prevValues : prev;\n  var curCacheValue = curKeys !== undefined && curValues !== undefined ? curKeys + ' - ' + curValues : cur;\n  return prevCacheValue === curCacheValue;\n});\nexport var getTranslationsForActiveLanguage = translationsEqualSelector(getActiveLanguage, getLanguages, getTranslations, getTranslationsForLanguage);\nexport var getTranslationsForSpecificLanguage = translationsEqualSelector(getLanguages, getTranslations, function (languages, translations) {\n  return defaultMemoize(function (languageCode) {\n    return getTranslationsForLanguage({\n      code: languageCode,\n      active: false\n    }, languages, translations);\n  });\n});\nvar getTranslate = createSelector(getTranslationsForActiveLanguage, getTranslationsForSpecificLanguage, getActiveLanguage, getOptions, function (translationsForActiveLanguage, getTranslationsForLanguage, activeLanguage, initializeOptions) {\n  return function (value) {\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var translateOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var defaultLanguage = initializeOptions.defaultLanguage,\n        defaultOptions = _objectWithoutProperties(initializeOptions, ['defaultLanguage']);\n\n    var overrideLanguage = translateOptions.language;\n    var translations = overrideLanguage !== undefined ? getTranslationsForLanguage(overrideLanguage) : translationsForActiveLanguage;\n    var defaultTranslations = activeLanguage && activeLanguage.code === defaultLanguage ? translationsForActiveLanguage : getTranslationsForLanguage(defaultLanguage);\n    var languageCode = overrideLanguage !== undefined ? overrideLanguage : activeLanguage && activeLanguage.code;\n\n    var mergedOptions = _extends({}, defaultOptions, translateOptions);\n\n    var getTranslation = function getTranslation(translationId) {\n      var hasValidTranslation = translations[translationId] !== undefined;\n      var hasValidDefaultTranslation = defaultTranslations[translationId] !== undefined;\n      var defaultTranslation = hasValidDefaultTranslation ? getLocalizedElement({\n        translation: defaultTranslations[translationId],\n        data: data,\n        renderInnerHtml: mergedOptions.renderInnerHtml\n      }) : \"No default translation found! Ensure you've added translations for your default langauge.\"; // if translation is not valid then generate the on missing translation message in it's place\n\n      var translation = hasValidTranslation ? translations[translationId] : mergedOptions.onMissingTranslation({\n        translationId: translationId,\n        languageCode: languageCode,\n        defaultTranslation: defaultTranslation\n      }); // if translations are missing than ovrride data to include translationId, languageCode\n      // as these will be needed to render missing translations message\n\n      var translationData = hasValidTranslation ? data : {\n        translationId: translationId,\n        languageCode: languageCode\n      };\n      return getLocalizedElement({\n        translation: translation,\n        data: translationData,\n        languageCode: languageCode,\n        renderInnerHtml: mergedOptions.renderInnerHtml\n      });\n    };\n\n    if (typeof value === 'string') {\n      return getTranslation(value);\n    } else if (Array.isArray(value)) {\n      return value.reduce(function (prev, cur) {\n        return _extends({}, prev, _defineProperty({}, cur, getTranslation(cur)));\n      }, {});\n    } else {\n      throw new Error('react-localize-redux: Invalid key passed to getTranslate.');\n    }\n  };\n});\nexport { getTranslate };","map":null,"metadata":{},"sourceType":"module"}