{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertStatus = convertStatus;\nexports.Timer = Timer;\nexports.treatNotification = treatNotification;\nexports.preloadImage = preloadImage;\nexports.mapObjectValues = mapObjectValues;\n\nvar _constants = require('../constants');\n/**\n * Convert status in a understandable status for the Notification component\n * @param {String|Number} status\n * @returns {String} status an understandable status\n */\n\n\nfunction convertStatus(status) {\n  var reHttpStatusCode = /^\\d{3}$/; // convert HTTP status code\n\n  if (reHttpStatusCode.test(status)) {\n    switch (true) {\n      case /^1/.test(status):\n        return _constants.STATUS.info;\n\n      case /^2/.test(status):\n        return _constants.STATUS.success;\n\n      case /^(4|5)/.test(status):\n        return _constants.STATUS.error;\n    }\n  }\n\n  return status;\n}\n/**\n * Create a Timer\n * @param {Number} delay\n * @param {Function} callback\n * @constructor\n */\n\n\nfunction Timer(delay, callback) {\n  var timerId = void 0;\n  var start = void 0;\n  var remaining = delay;\n\n  this.pause = function () {\n    clearTimeout(timerId);\n    remaining -= new Date() - start;\n  };\n\n  this.resume = function () {\n    start = new Date();\n    clearTimeout(timerId);\n    timerId = setTimeout(callback, remaining);\n  };\n\n  this.getTimeRemaining = function () {\n    return remaining;\n  };\n}\n/**\n * Treat data of a notification\n * @param {Object} notification\n * @returns {Object} a notification\n */\n\n\nfunction treatNotification(notification) {\n  if (notification.dismissAfter) {\n    notification.dismissAfter = parseInt(notification.dismissAfter);\n  }\n\n  notification.status = convertStatus(notification.status);\n\n  if (!notification.buttons) {\n    notification.buttons = [];\n  }\n\n  return notification;\n}\n/**\n * Preload an image\n * @param {String} url url of image to load\n * @param {Function} cb Function called when image is loaded or not\n * @returns {void}\n */\n\n\nfunction preloadImage(url, cb) {\n  var image = new Image();\n  image.src = url;\n  image.onload = cb;\n  image.onerror = cb;\n  return image;\n}\n/**\n * Return values of an Object in an Array\n * @param {Object} obj\n * @returns {Array}\n */\n\n\nfunction mapObjectValues(obj) {\n  var array = [];\n  Object.keys(obj).forEach(function (key) {\n    return array.push(obj[key]);\n  });\n  return array;\n}","map":null,"metadata":{},"sourceType":"script"}