{"ast":null,"code":"import _classCallCheck from \"/home/havoc/Documents/TempEdge/git/frontend/tempedgereact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/havoc/Documents/TempEdge/git/frontend/tempedgereact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/havoc/Documents/TempEdge/git/frontend/tempedgereact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/havoc/Documents/TempEdge/git/frontend/tempedgereact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/havoc/Documents/TempEdge/git/frontend/tempedgereact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/havoc/Documents/TempEdge/git/frontend/tempedgereact/src/Pages/Login/CreateNewUser.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { Field, reduxForm } from 'redux-form';\nimport Validators from 'redux-form-validators';\nimport { required, date } from 'redux-form-validators';\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport moment from 'moment';\nimport momentLocaliser from 'react-widgets-moment';\nimport { connect } from 'react-redux';\nimport { withLocalize, Translate } from 'react-localize-redux';\nimport { setActivePage } from '../../Redux/actions/tempEdgeActions';\nimport ReCaptcha from \"react-google-recaptcha\";\nimport keys from '../../apiKeys/keys';\nmomentLocaliser(moment);\nObject.assign(Validators.messages, {\n  dateFormat: {\n    id: \"form.errors.dateFormat\",\n    defaultMessage: \"Date field is required\"\n  }\n});\nObject.assign(Validators.defaultOptions, {\n  dateFormat: 'mm/dd/yyyy'\n});\n\nvar CreateNewUser =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CreateNewUser, _Component);\n\n  function CreateNewUser(props) {\n    var _this;\n\n    _classCallCheck(this, CreateNewUser);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateNewUser).call(this, props));\n    _this.state = {\n      reCaptchaToken: '',\n      btnDisabled: true\n    };\n\n    _this.renderInput = function (formProps) {\n      var errorClass = \"col-xs-10 \".concat(formProps.meta.error && formProps.meta.touched ? 'has-error' : '');\n      return React.createElement(\"div\", {\n        className: errorClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"input\", Object.assign({\n        className: \"form-control\",\n        placeholder: formProps.placeholder\n      }, formProps.input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })), _this.renderError(formProps));\n    };\n\n    _this.renderDateTimePicker = function (formProps) {\n      var errorClass = \"col-xs-10 \".concat(formProps.meta.error && formProps.meta.touched ? 'has-error-dob' : '');\n      return React.createElement(\"div\", {\n        className: errorClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(DateTimePicker, {\n        onChange: formProps.input.onChange,\n        onBlur: formProps.input.onBlur,\n        format: \"MM/DD/YYYY\",\n        time: formProps.showTime,\n        value: !formProps.input.value ? null : new Date(formProps.input.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), _this.renderError(formProps));\n    };\n\n    _this.onChange = function (recaptchaToken) {\n      console.log(\"recaptchaToken: \", recaptchaToken);\n\n      _this.setState({\n        reCaptchaToken: recaptchaToken,\n        btnDisabled: false\n      });\n    };\n\n    _this.renderReCaptcha = function (formProps) {\n      var errorClass = \"col-xs-12 \".concat(formProps.meta.error && formProps.meta.touched ? 'has-error-login login-input-error' : 'login-input');\n      return React.createElement(\"div\", {\n        className: errorClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(ReCaptcha, {\n        ref: function ref(_ref) {\n          _this.captcha = _ref;\n        },\n        size: formProps.size,\n        height: formProps.height,\n        theme: formProps.theme,\n        sitekey: keys.RECAPTCHA_SITE_KEY,\n        onChange: _this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }));\n    };\n\n    _this.addTranslationsForActiveLanguage();\n\n    return _this;\n  }\n\n  _createClass(CreateNewUser, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.history.location.pathname = \"/register/\".concat(this.props.activeLanguage.code);\n      this.props.history.push(\"/register/\".concat(this.props.activeLanguage.code));\n      this.props.setActivePage(\"register\");\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var hasActiveLanguageChanged = prevProps.activeLanguage !== this.props.activeLanguage;\n\n      if (hasActiveLanguageChanged) {\n        this.props.params.lang = this.props.activeLanguage.code;\n        this.props.history.location.pathname = \"/register/\".concat(this.props.activeLanguage.code);\n        this.props.history.push(\"/register/\".concat(this.props.activeLanguage.code));\n        this.addTranslationsForActiveLanguage();\n      }\n    }\n  }, {\n    key: \"addTranslationsForActiveLanguage\",\n    value: function addTranslationsForActiveLanguage() {\n      var _this2 = this;\n\n      var activeLanguage = this.props.activeLanguage;\n\n      if (!activeLanguage) {\n        return;\n      }\n\n      import(\"../../translations/\".concat(activeLanguage.code, \".tempedge.json\")).then(function (translations) {\n        _this2.props.addTranslationForLanguage(translations, activeLanguage.code);\n      });\n    }\n  }, {\n    key: \"renderError\",\n    value: function renderError(formProps) {\n      var fieldId = '';\n      var errMsg = '';\n\n      if (typeof formProps.input !== 'undefined') {\n        fieldId = \"com.tempedge.error.person.\".concat(formProps.input.name, \"required\");\n        errMsg = formProps.meta.error;\n\n        if (formProps.meta.touched && formProps.meta.error && typeof errMsg !== 'undefined') {\n          return React.createElement(\"p\", {\n            style: {\n              color: '#a94442'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }, React.createElement(Translate, {\n            id: fieldId,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }, errMsg));\n        }\n      }\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formValues) {\n      console.log(formValues); //this.captcha.reset();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      console.log(\"this.state.btnDisabled: \", this.state.btnDisabled);\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"text-center page-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        id: \"com.tempedge.msg.label.newuser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"New User\")), React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"form-horizontal center-block register-form\",\n        style: {\n          paddingBottom: \"0px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"col-xs-2 control-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        id: \"com.tempedge.msg.label.firstname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"First Name (Required)\")), React.createElement(Field, {\n        name: \"firstName\",\n        type: \"text\",\n        placeholder: \"First Name\",\n        component: this.renderInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"col-xs-2 control-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        id: \"com.tempedge.msg.label.middlename\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Middle Name\")), React.createElement(Field, {\n        name: \"middleName\",\n        type: \"text\",\n        placeholder: \"Middle Name\",\n        component: this.renderInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"col-xs-2 control-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        id: \"com.tempedge.msg.label.lastname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Last Name (Required)\")), React.createElement(Field, {\n        name: \"lastName\",\n        type: \"text\",\n        placeholder: \"Last Name\",\n        component: this.renderInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"col-xs-2 control-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        id: \"com.tempedge.msg.label.email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Email\")), React.createElement(Field, {\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Email\",\n        component: this.renderInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"col-xs-2 control-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        id: \"com.tempedge.msg.label.birthday\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"Birthday\")), React.createElement(Field, {\n        name: \"birthday\",\n        type: \"text\",\n        component: function component(formProps) {\n          return _this3.renderDateTimePicker(formProps);\n        },\n        validate: date(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6 col-md-offset-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary btn-block register-save-btn new-gency-register-save-btn\",\n        disabled: this.props.invalid || this.props.submiting || this.props.pristine || this.state.btnDisabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(Translate, {\n        id: \"com.tempedge.msg.label.save\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Save\"))))), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"center-block new-agency-captcha\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"captcha\",\n        size: \"normal\",\n        height: \"130px\",\n        theme: \"light\",\n        component: this.renderReCaptcha,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return CreateNewUser;\n}(Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.firstName) {\n    errors.firstName = 'Please enter your first name';\n  }\n\n  if (!formValues.middleName) {\n    errors.middleName = 'Please enter your middle name or initial';\n  }\n\n  if (!formValues.lastName) {\n    errors.lastName = 'Please enter your last name';\n  }\n\n  if (!formValues.email) {\n    errors.email = 'Email field is required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(formValues.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  return errors;\n};\n\nCreateNewUser.propTypes = {\n  setActivePage: PropTypes.func.isRequired //Current REDUX state\n\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    activePage: state.tempEdge.active_page\n  };\n};\n\nCreateNewUser = reduxForm({\n  form: 'createNewUser',\n  validate: validate\n})(CreateNewUser);\nexport default withLocalize(connect(mapStateToProps, {\n  setActivePage: setActivePage\n})(CreateNewUser));","map":{"version":3,"sources":["/home/havoc/Documents/TempEdge/git/frontend/tempedgereact/src/Pages/Login/CreateNewUser.js"],"names":["React","Component","ReactDOM","PropTypes","Field","reduxForm","Validators","required","date","DateTimePicker","moment","momentLocaliser","connect","withLocalize","Translate","setActivePage","ReCaptcha","keys","Object","assign","messages","dateFormat","id","defaultMessage","defaultOptions","CreateNewUser","props","state","reCaptchaToken","btnDisabled","renderInput","formProps","errorClass","meta","error","touched","placeholder","input","renderError","renderDateTimePicker","onChange","onBlur","showTime","value","Date","recaptchaToken","console","log","setState","renderReCaptcha","ref","captcha","size","height","theme","RECAPTCHA_SITE_KEY","addTranslationsForActiveLanguage","history","location","pathname","activeLanguage","code","push","prevProps","prevState","hasActiveLanguageChanged","params","lang","then","translations","addTranslationForLanguage","fieldId","errMsg","name","color","formValues","handleSubmit","onSubmit","paddingBottom","invalid","submiting","pristine","validate","errors","firstName","middleName","lastName","email","test","propTypes","func","isRequired","mapStateToProps","activePage","tempEdge","active_page","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { Field, reduxForm } from 'redux-form';\nimport Validators from 'redux-form-validators';\nimport { required, date } from 'redux-form-validators';\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport moment from 'moment';\nimport momentLocaliser from 'react-widgets-moment';\nimport { connect } from 'react-redux';\nimport { withLocalize, Translate } from 'react-localize-redux';\nimport  { setActivePage } from '../../Redux/actions/tempEdgeActions';\nimport ReCaptcha from \"react-google-recaptcha\";\nimport keys from '../../apiKeys/keys';\n\nmomentLocaliser(moment);\n\nObject.assign(Validators.messages, {\n  dateFormat: {\n    id: \"form.errors.dateFormat\",\n    defaultMessage: \"Date field is required\"\n  }\n});\n\nObject.assign(Validators.defaultOptions, {\n  dateFormat: 'mm/dd/yyyy'\n});\n\nclass CreateNewUser extends Component{\n  constructor(props) {\n    super(props);\n\n    this.addTranslationsForActiveLanguage();\n  }\n\n  state = { reCaptchaToken: '', btnDisabled: true }\n\n  componentWillMount(){\n    this.props.history.location.pathname = `/register/${this.props.activeLanguage.code}`;\n    this.props.history.push(`/register/${this.props.activeLanguage.code}`);\n    this.props.setActivePage(\"register\");\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    const hasActiveLanguageChanged = prevProps.activeLanguage !== this.props.activeLanguage;\n\n    if (hasActiveLanguageChanged) {\n      this.props.params.lang = this.props.activeLanguage.code;\n      this.props.history.location.pathname = `/register/${this.props.activeLanguage.code}`;\n      this.props.history.push(`/register/${this.props.activeLanguage.code}`);\n      this.addTranslationsForActiveLanguage();\n    }\n  }\n\n  addTranslationsForActiveLanguage(){\n    const {activeLanguage} = this.props;\n\n    if (!activeLanguage) {\n      return;\n    }\n\n    import(`../../translations/${activeLanguage.code}.tempedge.json`)\n      .then(translations => {\n        this.props.addTranslationForLanguage(translations, activeLanguage.code)\n      });\n  }\n\n  renderError(formProps){\n    let fieldId='';\n    let errMsg = '';\n\n    if(typeof formProps.input !== 'undefined'){\n      fieldId = `com.tempedge.error.person.${formProps.input.name}required`;\n      errMsg = formProps.meta.error;\n\n      if(formProps.meta.touched && formProps.meta.error && typeof errMsg !== 'undefined'){\n        return(\n          <p style={{color: '#a94442'}}><Translate id={fieldId}>{errMsg}</Translate></p>\n        );\n      }\n    }\n  }\n\n  renderInput = (formProps) => {\n    let errorClass = `col-xs-10 ${(formProps.meta.error && formProps.meta.touched)? 'has-error': ''}`;\n\n    return(\n      <div className={errorClass}>\n        <input className=\"form-control\" placeholder={formProps.placeholder} {...formProps.input} autoComplete=\"off\" />\n        {this.renderError(formProps)}\n      </div>\n    );\n  }\n\n  renderDateTimePicker = (formProps) => {\n    let errorClass = `col-xs-10 ${(formProps.meta.error && formProps.meta.touched)? 'has-error-dob': ''}`;\n\n    return(\n      <div className={errorClass}>\n        <DateTimePicker onChange={formProps.input.onChange} onBlur={formProps.input.onBlur} format=\"MM/DD/YYYY\" time={formProps.showTime} value={!formProps.input.value ? null : new Date(formProps.input.value)} />\n        {this.renderError(formProps)}\n      </div>\n    );\n  }\n\n  onChange = (recaptchaToken) => {\n    console.log(\"recaptchaToken: \", recaptchaToken);\n\n    this.setState({\n      reCaptchaToken: recaptchaToken,\n      btnDisabled: false\n    });\n  }\n\n  renderReCaptcha = (formProps) => {\n    let errorClass = `col-xs-12 ${(formProps.meta.error && formProps.meta.touched)? 'has-error-login login-input-error': 'login-input'}`;\n\n    return(\n      <div className={errorClass}>\n        <ReCaptcha\n            ref={(ref) => {this.captcha = ref;}}\n            size={formProps.size}\n            height={formProps.height}\n            theme={formProps.theme}\n            sitekey={keys.RECAPTCHA_SITE_KEY}\n            onChange={this.onChange}\n        />\n      </div>\n    );\n  }\n\n  onSubmit(formValues){\n    console.log(formValues);\n    //this.captcha.reset();\n  }\n\n  render(){\n    console.log(\"this.state.btnDisabled: \", this.state.btnDisabled);\n\n    return(\n      <React.Fragment>\n        <h2 className=\"text-center page-title\"><Translate id=\"com.tempedge.msg.label.newuser\">New User</Translate></h2>\n        <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"form-horizontal center-block register-form\" style={{paddingBottom: \"0px\"}}>\n          <div className=\"form-group\">\n              <label className=\"col-xs-2 control-label\"><Translate id=\"com.tempedge.msg.label.firstname\">First Name (Required)</Translate></label>\n              <Field name=\"firstName\" type=\"text\" placeholder=\"First Name\" component={this.renderInput} />\n          </div>\n          <div className=\"form-group\">\n              <label className=\"col-xs-2 control-label\"><Translate id=\"com.tempedge.msg.label.middlename\">Middle Name</Translate></label>\n              <Field name=\"middleName\" type=\"text\" placeholder=\"Middle Name\" component={this.renderInput} />\n          </div>\n          <div className=\"form-group\">\n              <label className=\"col-xs-2 control-label\"><Translate id=\"com.tempedge.msg.label.lastname\">Last Name (Required)</Translate></label>\n              <Field name=\"lastName\" type=\"text\" placeholder=\"Last Name\" component={this.renderInput} />\n          </div>\n          <div className=\"form-group\">\n              <label className=\"col-xs-2 control-label\"><Translate id=\"com.tempedge.msg.label.email\">Email</Translate></label>\n              <Field name=\"email\" type=\"email\" placeholder=\"Email\" component={this.renderInput} />\n          </div>\n          <div className=\"form-group\">\n              <label className=\"col-xs-2 control-label\"><Translate id=\"com.tempedge.msg.label.birthday\">Birthday</Translate></label>\n              <Field name=\"birthday\" type=\"text\" component={(formProps) => this.renderDateTimePicker(formProps)} validate={date()} />\n          </div>\n          <div className=\"form-group\">\n              <div className=\"col-md-6 col-md-offset-3\">\n                <button type=\"submit\" className=\"btn btn-primary btn-block register-save-btn new-gency-register-save-btn\" disabled={this.props.invalid || this.props.submiting || this.props.pristine || this.state.btnDisabled}><Translate id=\"com.tempedge.msg.label.save\">Save</Translate></button>\n              </div>\n          </div>\n      </form>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"center-block new-agency-captcha\">\n            <Field name='captcha' size=\"normal\" height=\"130px\" theme=\"light\" component={this.renderReCaptcha} />\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n    );\n  }\n}\n\nlet validate = (formValues) => {\n  let errors ={};\n\n  if(!formValues.firstName){\n    errors.firstName = 'Please enter your first name';\n  }\n\n  if(!formValues.middleName){\n    errors.middleName = 'Please enter your middle name or initial';\n  }\n\n  if(!formValues.lastName){\n    errors.lastName = 'Please enter your last name';\n  }\n\n  if (!formValues.email) {\n      errors.email = 'Email field is required'\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(formValues.email)) {\n      errors.email = 'Invalid email address'\n  }\n\n  return errors;\n}\n\nCreateNewUser.propTypes = {\n  setActivePage: PropTypes.func.isRequired\n}\n                      //Current REDUX state\nlet mapStateToProps = (state) => {\n  return({\n    activePage: state.tempEdge.active_page\n  });\n}\n\nCreateNewUser = reduxForm({\n  form: 'createNewUser',\n  validate: validate\n})(CreateNewUser);\n\nexport default withLocalize(connect(mapStateToProps, { setActivePage })(CreateNewUser));\n"]},"metadata":{},"sourceType":"module"}