{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.types = exports.actions = exports.updateNotification = exports.notify = exports.addNotification = undefined;\nexports.removeNotification = removeNotification;\nexports.removeNotifications = removeNotifications;\n\nvar _helpers = require('../helpers');\n\nvar _constants = require('../constants');\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n} // An array to store notifications object\n\n\nvar INITIAL_STATE = []; // Action types\n\nvar ADD_NOTIFICATION = 'ADD_NOTIFICATION';\nvar UPDATE_NOTIFICATION = 'UPDATE_NOTIFICATION';\nvar REMOVE_NOTIFICATION = 'REMOVE_NOTIFICATION';\nvar REMOVE_NOTIFICATIONS = 'REMOVE_NOTIFICATIONS';\n/**\r\n * Add a notification (thunk action creator)\r\n *\r\n * We use a thunk here to create an ADD_NOTIFICATION action\r\n * and only return the notification object.\r\n * @param {Object} notification\r\n * @returns {Object} notification\r\n */\n\nvar addNotification = exports.addNotification = function addNotification(notification) {\n  return function (dispatch) {\n    if (!notification.id) {\n      notification.id = new Date().getTime();\n    }\n\n    notification = (0, _helpers.treatNotification)(notification); // if there is an image, we preload it\n    // and add notification when image is loaded\n\n    if (notification.image) {\n      (0, _helpers.preloadImage)(notification.image, dispatch.bind(undefined, _addNotification(notification)));\n    } else {\n      dispatch(_addNotification(notification));\n    }\n\n    return notification;\n  };\n};\n/**\r\n * Add a notification (action creator)\r\n *\r\n * @param {Object} notification\r\n * @returns {{type: string, payload: {Object}}}\r\n * @private\r\n */\n\n\nfunction _addNotification(notification) {\n  return {\n    type: ADD_NOTIFICATION,\n    payload: notification\n  };\n}\n/**\r\n * Update or create a notification\r\n * @param {Object} notification\r\n * @returns {{type: string, payload: {Object}}}\r\n */\n\n\nvar notify = exports.notify = function notify(notification) {\n  return function (dispatch, getState) {\n    var notifications = getState().notifications;\n    var doesNotifExist = notifications.find(function (notif) {\n      return notif.id === notification.id;\n    });\n\n    if (doesNotifExist) {\n      return dispatch(updateNotification(notification));\n    }\n\n    return dispatch(addNotification(notification));\n  };\n};\n/**\r\n * Update a notification (thunk action creator)\r\n *\r\n * We use a thunk here to create an UPDATE_NOTIFICATION action\r\n * and only return the notification object.\r\n * @param {Object} notification\r\n * @returns {Object} notification\r\n */\n\n\nvar updateNotification = exports.updateNotification = function updateNotification(notification) {\n  return function (dispatch, getState) {\n    if (!notification.id) {\n      throw new Error('A notification must have an `id` property to be updated');\n    }\n\n    var notifications = getState().notifications;\n    var index = notifications.findIndex(function (oldNotification) {\n      return oldNotification.id === notification.id;\n    });\n    var currNotification = notifications[index];\n    notification = (0, _helpers.treatNotification)(notification); // if image is different, then we preload it\n    // and update notification when image is loaded\n\n    if (notification.image && (!currNotification.image || currNotification.image && notification.image !== currNotification.image)) {\n      (0, _helpers.preloadImage)(notification.image, dispatch.bind(undefined, _updateNotification(notification)));\n    } else {\n      dispatch(_updateNotification(notification));\n    }\n\n    return notification;\n  };\n};\n/**\r\n * Update a notification (action creator)\r\n *\r\n * @param {Object} notification\r\n * @returns {{type: string, payload: {Object}}}\r\n * @private\r\n */\n\n\nfunction _updateNotification(notification) {\n  return {\n    type: UPDATE_NOTIFICATION,\n    payload: notification\n  };\n}\n/**\r\n * Remove a notification (action creator)\r\n *\r\n * @param {Object} notification\r\n * @returns {{type: string, payload: {Object}}}\r\n */\n\n\nfunction removeNotification(notification) {\n  return {\n    type: REMOVE_NOTIFICATION,\n    payload: notification\n  };\n}\n/**\r\n * Remove all notifications (action creator)\r\n *\r\n * @returns {{type: string}}\r\n */\n\n\nfunction removeNotifications() {\n  return {\n    type: REMOVE_NOTIFICATIONS\n  };\n} // Action creators\n\n\nvar actions = exports.actions = {\n  addNotification: addNotification,\n  updateNotification: updateNotification,\n  removeNotification: removeNotification,\n  removeNotifications: removeNotifications\n}; // Actions types\n\nvar types = exports.types = {\n  ADD_NOTIFICATION: ADD_NOTIFICATION,\n  UPDATE_NOTIFICATION: UPDATE_NOTIFICATION,\n  REMOVE_NOTIFICATION: REMOVE_NOTIFICATION,\n  REMOVE_NOTIFICATIONS: REMOVE_NOTIFICATIONS\n}; // Reducers\n\nexports.default = function () {\n  var defaultNotification = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants.DEFAULT_NOTIFICATION;\n  return function () {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n    var _ref = arguments[1];\n    var type = _ref.type,\n        payload = _ref.payload;\n\n    switch (type) {\n      case ADD_NOTIFICATION:\n        var notification = Object.assign({}, defaultNotification, payload);\n        return [].concat(_toConsumableArray(state), [notification]);\n\n      case UPDATE_NOTIFICATION:\n        return state.map(function (notification) {\n          if (notification.id === payload.id) {\n            return Object.assign({}, defaultNotification, payload);\n          }\n\n          return notification;\n        });\n\n      case REMOVE_NOTIFICATION:\n        return state.filter(function (notification) {\n          return notification.id !== payload;\n        });\n\n      case REMOVE_NOTIFICATIONS:\n        return [];\n\n      default:\n        return state;\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}