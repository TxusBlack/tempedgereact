{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\migue\\\\Documents\\\\Jose\\\\TempEdge\\\\tempedgereact\\\\tempedgereact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\migue\\\\Documents\\\\Jose\\\\TempEdge\\\\tempedgereact\\\\tempedgereact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar getCountryList = function getCountryList(countryList) {\n  var country_list = [];\n  countryList.map(function (country) {\n    country_list.push({\n      name: country.name,\n      countryId: country.countryId\n    });\n  });\n  return {\n    countryList: countryList,\n    country_list: country_list\n  };\n};\n\nvar getRegionList =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(countryList, selectedCountry) {\n    var regions, regions_list;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            regions_list = [];\n            _context.next = 3;\n            return countryList.map(function (country) {\n              if (country.name === selectedCountry) {\n                regions = country.regionEntityList;\n              }\n            });\n\n          case 3:\n            regions.map(function (region, index) {\n              regions_list.push({\n                name: region.name,\n                regionId: region.regionId\n              });\n            });\n            return _context.abrupt(\"return\", regions_list);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function getRegionList(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar parseCountryRegion = {\n  getCountryList: getCountryList,\n  getRegionList: getRegionList\n};\nexport default parseCountryRegion;","map":{"version":3,"sources":["C:\\Users\\migue\\Documents\\Jose\\TempEdge\\tempedgereact\\tempedgereact\\src\\components\\common\\CountryRegionParser\\CountryRegionParser.js"],"names":["getCountryList","countryList","country_list","map","country","push","name","countryId","getRegionList","selectedCountry","regions_list","regions","regionEntityList","region","index","regionId","parseCountryRegion"],"mappings":";;;AAAA,IAAIA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,WAAD,EAAiB;AACpC,MAAIC,YAAY,GAAG,EAAnB;AAEAD,EAAAA,WAAW,CAACE,GAAZ,CAAgB,UAACC,OAAD,EAAa;AAC3BF,IAAAA,YAAY,CAACG,IAAb,CAAkB;AAChBC,MAAAA,IAAI,EAAEF,OAAO,CAACE,IADE;AAEhBC,MAAAA,SAAS,EAAEH,OAAO,CAACG;AAFH,KAAlB;AAID,GALD;AAOA,SAAO;AACLN,IAAAA,WAAW,EAAXA,WADK;AAELC,IAAAA,YAAY,EAAZA;AAFK,GAAP;AAID,CAdD;;AAgBA,IAAIM,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOP,WAAP,EAAoBQ,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEdC,YAAAA,YAFc,GAEC,EAFD;AAAA;AAAA,mBAIZT,WAAW,CAACE,GAAZ,CAAgB,UAACC,OAAD,EAAa;AACjC,kBAAGA,OAAO,CAACE,IAAR,KAAiBG,eAApB,EAAoC;AAClCE,gBAAAA,OAAO,GAAGP,OAAO,CAACQ,gBAAlB;AACD;AACF,aAJK,CAJY;;AAAA;AAUlBD,YAAAA,OAAO,CAACR,GAAR,CAAY,UAACU,MAAD,EAASC,KAAT,EAAmB;AAC7BJ,cAAAA,YAAY,CAACL,IAAb,CAAkB;AAChBC,gBAAAA,IAAI,EAAEO,MAAM,CAACP,IADG;AAEhBS,gBAAAA,QAAQ,EAAEF,MAAM,CAACE;AAFD,eAAlB;AAID,aALD;AAVkB,6CAiBXL,YAjBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbF,aAAa;AAAA;AAAA;AAAA,GAAjB;;AAoBA,IAAIQ,kBAAkB,GAAG;AACvBhB,EAAAA,cAAc,EAAdA,cADuB;AAEvBQ,EAAAA,aAAa,EAAbA;AAFuB,CAAzB;AAKA,eAAeQ,kBAAf","sourcesContent":["let getCountryList = (countryList) => {\r\n  let country_list = [];\r\n  \r\n  countryList.map((country) => {\r\n    country_list.push({\r\n      name: country.name,\r\n      countryId: country.countryId\r\n    });\r\n  });\r\n\r\n  return {\r\n    countryList,\r\n    country_list\r\n  };\r\n}\r\n\r\nlet getRegionList = async (countryList, selectedCountry) => {\r\n  let regions;\r\n  let regions_list = [];\r\n\r\n  await countryList.map((country) => {\r\n    if(country.name === selectedCountry){\r\n      regions = country.regionEntityList;\r\n    }\r\n  });\r\n\r\n  regions.map((region, index) => {\r\n    regions_list.push({\r\n      name: region.name,\r\n      regionId: region.regionId\r\n    });\r\n  });\r\n\r\n  return regions_list;\r\n}\r\n\r\nlet parseCountryRegion = {\r\n  getCountryList,\r\n  getRegionList\r\n}\r\n\r\nexport default parseCountryRegion;\r\n"]},"metadata":{},"sourceType":"module"}